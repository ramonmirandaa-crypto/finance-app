version: '3.8'

services:
  # 1. Contêiner temporário para clonar o repositório.
  #    Ele executa uma vez e depois para.
  init:
    image: alpine/git:latest
    # Comando para clonar a versão PÚBLICA do repositório (para o nosso teste).
    command: >
      sh -c "git clone https://github.com/ramonmirandaa-crypto/finance-app.git /source; echo 'Comando git clone finalizado. Entrando em modo de espera.'; sleep infinity"
    volumes:
      - source-code:/source # Salva o código clonado no volume 'source-code'.

  # 2. Contêiner da Aplicação Backend.
  backend:
    image: node:18-alpine
    container_name: finance-app-backend
    restart: unless-stopped
    working_dir: /usr/src/app
    volumes:
      - source-code:/usr/src/app # Usa os arquivos que o 'init' preparou.
    ports:
      - "3333:3333"
    environment:
      - DATABASE_HOST=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy # Espera o DB ficar saudável.
      init:
        condition: service_completed_successfully # Espera o 'init' terminar com sucesso.

  # 3. Contêiner do Banco de Dados.
  db:
    image: postgres:15-alpine
    container_name: finance-app-postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - /mnt/dados/finance-app/postgres-data:/var/lib/postgresql/data

# 4. Define o "disco virtual" (volume nomeado) que será compartilhado.
volumes:
  source-code:
